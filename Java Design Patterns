#Java Design Patterns

###Abstract Factory

Intent: Provide an interface for creating families of related or dependent objects without specifying their concrete classes.

+   a system should be independent of how its products are created, composed and represented.
+   a system should be configured with one of multiple families of products.
+   a family of related product objects is designed to be used together, and you need to enforce this constraint.
+   you want to provide a class library of products, and you want to reveal just their interfaces, not their implementations.

###Factory Method

Intent: Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.

+   a class can't anticipate the class of objects it must create.
+   a class wants subclasses to specify the objects it creates.
+   classes delegate responsibility to one of several helper subclasses, and you want to localize the knowledge of which helper subclass is the delegate.

###Builder

Intent: Separate the construction of a complex object from its representation so that the same construction process can create different representations.

+   the algorithm for creating a complex object should be independent of the parts that make up the object and how they're assembled.
+   the construction process must allow different representations for the object that's constructed.